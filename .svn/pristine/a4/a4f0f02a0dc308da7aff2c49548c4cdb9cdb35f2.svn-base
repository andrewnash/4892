/*
 * Copyright 2018 Jonathan Anderson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <cstdint>


template<typename T>
class List
{
public:
	class Node
	{
	public:
		Node(Node *nex_, T *key_)
		{
			this.nex = nex_;
			this.key = key_;
		}

		Node* get_nex()
		{
			return nex;
		}

		T* get_key()
		{
			return key;
		}


	private:
		Node *nex;
		T *key;
	};
	//! A constant iterator over elements of the List.
	class const_iterator
	{
	public:
		const_iterator();

		/**
		 * The dereference operator.
		 *
		 * @returns   a reference to the "current" element
		 */
		const T& operator*();

		/**
		 * Pre-increment operator (i.e., `++i`).
		 *
		 * This method increments the iterator and then returns a
		 * reference to the newly-incremented iterator.
		 *
		 * @returns   a reference to this iterator, after incrementing
		 */
		const_iterator& operator++();

		/**
		 * Post-increment operator (i.e., `i++`).
		 *
		 * This method returns a copy of this iterator as it currently
		 * is (i.e., pointing where it currently points) and _then_
		 * increments itself.
		 *
		 * @param     ignored   this is only used to distinguish the two
		 *                      increment operators (pre- and post-)
		 *                      from each other: its value should be
		 *                      ignored
		 *
		 * @returns   an iterator to the previously-current element
		 */
		const_iterator operator++(int ignored);

		//! Is this iterator pointing at the same place as another one?
		bool operator== (const const_iterator&) const;

		//! Is this iterator pointing at a different place from another?
		bool operator!= (const const_iterator&) const;
	};

	//! A mutable version of const_iterator (can modify list values)
	class iterator : public const_iterator
	{
	public:
		iterator();

		// Non-const overloads of const_iterator methods:
		T& operator*();
		iterator& operator++();
		iterator operator++(int ignored);
	};


	//! Default constructor
	List()
	{
		tail = new Node(nullptr, 0);
		head = new Node(tail, 0);
	}

	//! Copy constructor
	List(const List&);

	//! Move constructor
	List(List&&);

	//! Destructor
	~List();

	//! Copy assignment operator
	List& operator= (const List&)
	{
		Node* currentNode = this->head;

	}

	//! Move assignment operator
	List& operator= (List&&);


	//.;
	// Accessors:
	//
	//! How many elements are in this list?
	size_t size() const
	{
		std::size_t nodeCount = 0;
		Node* currentNode = this->head;
		while(currentNode != nullptr)
		{
			Node* nextNode = currentNode->returnNext();
			currentNode = nextNode;
			nodeCount++;
		}
		return nodeCount;
	}

	//! Is this list empty?
	bool empty() const
	{
		if(size < 1)
		{
			return true;
		}
		return false;
	}

	//! Get an iterator to the beginning of the list
	iterator begin()
	{
		return head;
	}
	const_iterator begin() const
	{
		auto const s = head;
		return s;
	}

	//! Get an iterator just past the end of the list
	iterator end()
	{
		return tail;
	}
	const_iterator end() const
	{
		auto const f = tail;
		return f;
	}


	//
	// Mutators:
	//
	//! Copy an element to the front of the list
	void push_front(const T& data)
	{
		Node newHead = new Node(&this.head, data);
		head = newHead;
	}

	//! Move an element to the front of the list
	void push_front(T&& data)
	{
		Node newHead = new Node(&this.head, data);
		head = newHead; 
		delete data;
	}

	//! Copy an element to the back of the list
	void push_back(const T& data)
	{
		Node newTail = new Node(nullptr, data); 
		tail = &newTail;
	}

	//! Add an element to the back of the list
	void push_back(T&& data)
	{
		Node newTail = new Node(nullptr, data); 
		tail = &newTail;	
	}

	/**
	 * Copy an element into an arbitrary location.
	 *
	 * This method makes a copy of an element and inserts that copy into a
	 * location pointed at by the given iterator. After insertion into a
	 * list of n elements, the list should contain n+1 elements (i.e., no
	 * existing element should be replaced).
	 *
	 * @returns   an iterator pointing at the newly-inserted element
	 */
	iterator insert(iterator, const T&);

	/**
	 * Move an element into an arbitrary location.
	 *
	 * This method inserts an element into a location pointed at by the
	 * given iterator, using move semantics to avoid copies. After insertion
	 * into a list of n elements, the list should contain n+1 elements
	 * (i.e., no existing element should be replaced).
	 *
	 * @returns   an iterator pointing at the newly-inserted element
	 */
	iterator insert(iterator, const T&&);

	//! Remove an element from an arbitrary location
	void erase(iterator);

private:
	// Add whatever you need to add here
	size_t theSize;
	Node* head;
	Node* tail;
};
